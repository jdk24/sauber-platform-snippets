    # -*- coding: utf-8 -*-
"""
/***************************************************************************
 SauberViewer
                                 A QGIS plugin
 Provides access and control over SAUBER raster data layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2020 by geomer GmbH
        email                : info@geomer.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

#TODO: Clean up imports
from qgis.core import (
    Qgis,
    QgsProject, 
    QgsRasterLayer, 
    QgsVectorLayer,
    QgsRectangle, 
    QgsPoint,
    QgsWkbTypes
)

from qgis.PyQt.QtWidgets import (
    QAction, 
    QInputDialog, 
    QLineEdit, 
    QLabel, 
    QVBoxLayout,
    QWidget,
    QTableWidgetItem
)

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.utils import iface
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets

import os.path
import requests
import json
import xml.etree.ElementTree as ET
from datetime import datetime

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sauber_raster_viewer_dialog import SauberRasterViewerDialog



class SauberRasterViewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        self.station_dict = {}

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SauberViewer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SAUBER Raster Viewer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SauberViewer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sauber_raster_viewer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SAUBER raster viewer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SAUBER Raster Viewer'),
                action)
            self.iface.removeToolBarIcon(action)


    def checkLayerExists(self,layerSource):
        """
        Check if layer is already loaded to avoid duplicates.
        Expects Layer source since names can be changed.
        """

        layer_paths = []
        layer_paths = [layer.source() for layer in QgsProject.instance().mapLayers().values()]

        if layerSource in layer_paths:
            return
        else: 
            return 1


    def loadRasterLayer(self,warning=True):
        """
        Load raster layer into map canvas
        """

        curr_region = self.getCurrRegion()
        curr_pollutant = self.getCurrRegionPollutant()

        timeframe = self.getMinMaxTime()

        if curr_region and curr_pollutant:

            wmst_url = "url=https://sauber-sdi.meggsimum.de/geoserver/image_mosaics/wms&crs=EPSG:25832&dpiMode=7&format=image/png&layers={0}_{1}&styles&temporalSource=provider&timeDimensionExtent={2}&type=wmst".format(curr_region,curr_pollutant,timeframe)            
            
            raster_layer = QgsRasterLayer(wmst_url, "{0} {1}".format(curr_region.upper(),curr_pollutant.upper()), "WMS")

            if self.checkLayerExists(wmst_url):
                if raster_layer.isValid():
                    QgsProject.instance().addMapLayer(raster_layer)
                else: iface.messageBar().pushMessage("Error", "Raster Layer konnte nicht geladen werden", level=Qgis.Critical, duration=4)
                return
            elif warning==True: 
                iface.messageBar().pushMessage("Hinweis", "Raster Layer bereits geladen", level=Qgis.Info, duration=4)
                return

            # Get Layer ID, set active and visible 
            layer = QgsProject.instance().mapLayersByName("{0} {1}".format(curr_region.upper(),curr_pollutant.upper()))[0]
            iface.setActiveLayer(layer)
            QgsProject.instance().layerTreeRoot().findLayer(layer).setItemVisibilityChecked(True)


    def getCapabilitiesFile(self):

        capabilities_url = "https://sauber-sdi.meggsimum.de/geoserver/image_mosaics/wms?service=WMS&version=1.1.0&request=GetCapabilities"

        try:
            capabilities_response = requests.get(capabilities_url, verify=False)#,auth)) # TODO: Enable auth, enable verifiy
            capabilities_text = capabilities_response.text
        except requests.exceptions.HTTPError as http_err:
            print(f'HTTP error: {http_err}')
        except Exception as err:
            print(f'Error occurred: {err}')
            iface.messageBar().pushMessage("Error", "Raster Capabilities konnten nicht heruntergeladen werden", level=Qgis.Critical, duration=4)

        self.capabilities_root = ET.fromstring(capabilities_text)  


    def getMinMaxTime(self):

        curr_region = self.getCurrRegion()
        curr_pollutant = self.getCurrRegionPollutant()

        # Match Getcap with selected region and pollutant
        for child in self.capabilities_root.findall("./Capability/Layer/Layer[Name='{0}']/Extent".format(str(curr_region+'_'+curr_pollutant))):
            timeframe = child.text

        min_time = timeframe.split("/")[0]
        max_time = timeframe.split("/")[1]

        # Set DateTime Widgets to min,max time for each station+component
        self.dlg.start_date_btn.setMinimumDateTime(QtCore.QDateTime.fromString(min_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.start_date_btn.setDateTime(QtCore.QDateTime.fromString(min_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.end_date_btn.setMaximumDateTime(QtCore.QDateTime.fromString(max_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.end_date_btn.setDateTime(QtCore.QDateTime.fromString(max_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))

        return timeframe


    def getRasterLayerCombo(self):
        
        combo_url = "https://sauber-sdi.meggsimum.de/geoserver/image_mosaics/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=image_mosaics%3Afv_region_pollutants&outputFormat=application/json"

        try:
            raster_response = requests.get(combo_url, verify=False)#,auth)) # TODO: Enable auth, enable verifiy
            raster_text = raster_response.text
        except requests.exceptions.HTTPError as http_err:
            print(f'HTTP error: {http_err}')
        except Exception as err:
            print(f'Error occurred: {err}')

        self.raster_dict = json.loads(raster_text)

        # Clear in case dlg gets called multiple times
        regions = []
        self.dlg.box_region.clear()

        # Iterate over dict and fill stations list 
        for region in self.raster_dict["features"]:
            regions.append(region["properties"]["region"]) if region["properties"]["region"] not in regions else regions

        # Sort for ordering in gui box
        regions.sort()

        # push to combobox
        for region in regions:
            self.dlg.box_region.addItem(region)

        # Call function for first iteration on startup
        self.getCurrRegion()


    def getCurrRegion(self):
        """ Listens to signal when station selection is changed in combobox """
        curr_region = self.dlg.box_region.currentText()
        self.filterRasterPollutants(self.dlg.box_region.currentText())
        return curr_region


    def getCurrRegionPollutant(self):
        """Listens to signal when pollutant selection is changed in combobox"""
        curr_raster_pollutant = self.dlg.box_raster_pollutant.currentText()
        return curr_raster_pollutant


    def filterRasterPollutants(self,region):
        """ Dict lookup: Find corresponding pollutants for selected station  """
        self.dlg.box_raster_pollutant.clear()
        for i in self.raster_dict["features"]:
            if i["properties"]["region"] == region:
                pollutant = i["properties"]["pollutant"]
                    # Remove curly brackets and split for insert into second combo box                    
                self.dlg.box_raster_pollutant.addItem(pollutant.replace('"',''))


    def zoomToRaster(self):

        self.loadRasterLayer(warning=False)
        layer = iface.activeLayer()
        canvas = iface.mapCanvas()
        extent = layer.extent()
        canvas.setExtent(extent)

        #TODO: Use fixed bbox?
        # scale=1000
        # rect = QgsRectangle(float(stat_x)-scale,float(stat_y)-scale,float(stat_x)+scale,float(stat_y)+scale)
        # iface.mapCanvas().setExtent(rect)
        # iface.mapCanvas().refresh()

    def show_temp_control(self, checked):

        for i in iface.mainWindow().findChildren(QtWidgets.QDockWidget):
            if i.objectName() == 'Temporal Controller':
                i.setVisible(True)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SauberRasterViewerDialog()
                    
            self.getRasterLayerCombo()
            self.getCapabilitiesFile()
            self.getMinMaxTime()

        # Zoom to raster btn
        self.dlg.zoom_to_raster.clicked.connect(self.zoomToRaster)

        # Show Temp Controller 
        self.dlg.show_tempctl_btn.clicked.connect(self.show_temp_control)

        # Listen for selection change
        self.dlg.box_region.activated.connect(self.getMinMaxTime)
        self.dlg.box_raster_pollutant.activated.connect(self.getMinMaxTime)

        # Load layer btn
        self.dlg.load_raster_layer_btn.clicked.connect(lambda: self.loadRasterLayer(True))

        self.dialogs = list()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed 

        if result:

            self.dlg.close()